# yaml-language-server: $schema=https://taskfile.dev/schema.json

version: '3'

# MUST have this ONLY in root for env variables to work.
dotenv: ['run.env', '{{.ENV}}/.env', '{{.HOME}}/.env']

includes:
  dev: 
    taskfile: ./../../dev-taskfile.yml
    flatten: true
  pc: 
    taskfile: ./../process-compose/pc.taskfile.yml
    #flatten: true

env:
  
  # Darwin - works both locally and in Github CI.
  PATH: '{{.PATH}}:{{.BASE_DEP_PATH}}:{{.BASE_BIN_NAME}}'

  DECKFONTS: '{{.PWD}}/ajstarks__font/deckfonts'

var:

  DECK_DEEP_PATH: '{{.DECK_DEEP_PATH | default "{{.PWD}}/ajstarks__decksh/decksh" }}'
  DECK_DEEP_NAME_SH: '{{.DECK_DEEP_NAME_SH | default "test.dsh" }}'
  
  DECK_DEEP_WHICH_SH: '{{.DECK_DEEP_PATH}}/{{.DECK_DEEP_NAME_SH}}'

  PATH: '{{.PATH}}'

tasks:
  default:
    cmds:
      - echo ''
      - echo DECKFONTS              {{shellQuote .DECKFONTS}}
      - echo ''
      - echo DECK_DEEP_PATH         {{shellQuote .DECK_DEEP_PATH}}
      - echo DECK_DEEP_NAME_SH      {{.DECK_DEEP_NAME_SH}}
      - echo DECK_DEEP_NAME_XML     {{.DECK_DEEP_NAME_XML}}
      - echo ''
      - echo DECK_DEEP_WHICH_SH     {{shellQuote .DECK_DEEP_WHICH_SH}}
      - echo DECK_DEEP_WHICH_XML    {{shellQuote .DECK_DEEP_WHICH_XML}}
      - echo ''
    silent: true

  all:git:
    cmds:
      - cd ajstarks__deck && task all
      - cd ajstarks__decksh && task all
      - cd ajstarks__deckviz && task all
      - cd ajstarks__ebcanvas && task all
      - cd ajstarks__font && task all

  all:bin:
    cmds:
      - cd ajstarks__deck && task bin
      - cd ajstarks__decksh && task bin
      - cd ajstarks__deckviz && task bin
      - cd ajstarks__ebcanvas && task bin
      - cd ajstarks__font && task bin
      
### pack ( the bins below into this level)

  pack:up:
    cmds:
      # works very well.
      - mkdir -p ./.bin
      - cp ./*/.bin/* ./{{.BASE_BIN_NAME}}
  pack:list:
    cmds:
      - ls -al ./{{.BASE_BIN_NAME}}/*deck*
  pack:del:
    cmds:
      - rm -f ./{{.BASE_BIN_NAME}}/*deck*

### install ( not needed, as BASE_BIN_NAME works well )

  install:
    cmds:
      # copy all of .bin into the go bin, so we have it on path. easier to work this way
      - cp ./{{.BASE_BIN_NAME}}/*deck* {{.GO_ENV_BIN_PATH}}
      
  install:list:
    cmds:
      - ls -al {{.GO_ENV_BIN_PATH}}/*deck*
  install:del:
    cmds:
      # del the right ones
      - rm -f {{.GO_ENV_BIN_PATH}}/*deck*

  clean:
      cmds:
      # Need a way to remove src and .bin folders.
      #- cd ajstarks__deck && task go:clean
      #- cd ajstarks__decksh && task all
      #- cd ajstarks__ebcanvas && task all

### run

  run:sh:
    cmds:
      # Pipe off some folder
      - '{{.BASE_BIN_NAME}}/decksh_darwin_arm64 {{.DECK_DEEP}} > base.xml'
      #- '{{.BASE_BIN_NAME}}/decksh_darwin_arm64 {{.DECK_DEEP}} > base.xml'
      #- task go:run -- -o foo.xml
      # decksh                   # input from stdin, output to stdout
      # decksh -o foo.xml        # input from stdin, output to foo.xml
      # decksh foo.sh            # input from foo.sh output to stdout
      # decksh -o foo.xml foo.sh # input from foo.sh output to foo.xml
      # decksh -version          # show decksh version
      # decksh -dump ...         # show decksh variables

  run:svg:xml:
    cmds:
      # will spew out a file per frame.
      - svgdeck_darwin_arm64 {{.DECK_DEEP_WHICH_XML}}
  run:svg:del:
    cmds:
      - rm *.svg

  run:pdf:xml:
    cmds:
      - pdfdeck_darwin_arm64 {{.DECK_DEEP_WHICH_XML}}
  run:pdf:del:
    cmds:
      - rm *.svg


  run:gui:sh:
    cmds:
      #- cd {{.DECK_DEEP_PATH}} && decksh_darwin_arm64 {{.DECK_DEEP_WHICH_SH}} | ebdeck_darwin_arm64
      - decksh_darwin_arm64 {{.DECK_DEEP_WHICH_SH}} | ebdeck_darwin_arm64

  run:gui:xml:
    cmds:
      # ```ebdeck f.xml # read from a deck file```
      - ebdeck_darwin_arm64 {{.DECK_DEEP_WHICH_SH}}

  run:editor:help:
    cmds:
      - go run . -h
  run:editor:
    cmds:
      - go run . --dshfile {{.DECK_DEEP_WHICH_SH}} --lineid "text \"Hello World\"" -oldtext "World" -newtext "Go"
      
    