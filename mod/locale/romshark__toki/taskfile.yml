# yaml-language-server: $schema=https://taskfile.dev/schema.json

version: '3'

# MUST have this ONLY in root for env variables to work.
dotenv: ['dev.env', '{{.ENV}}/.env', '{{.HOME}}/.env']

interval: 1000ms

includes:
  dev: 
    taskfile: ./../../../dev-taskfile.yml
    flatten: true

tasks:
  default:
    cmds:
      - task --list-all

### install

  install:
    desc: install the toki cli.
    cmds:
      # just install it to get going.
      # https://github.com/romshark/toki
      - go install -v github.com/romshark/toki@latest

      # tailwind installer.
      - go install -v github.com/hookenz/gotailwind/v4@latest
      - tailwindcss -h

      #- go get -tool github.com/hookenz/gotailwind/v4@latest

### help

  run:help:
    desc: help cli.
    cmds:
      - toki -h

### init 

  run:init:new:
    desc: create new toki project. Example " TOKI_NAME=tokiexample TOKI_TEMPLATE=main-template.go task run:init:new "
    requires:
      vars: [TOKI_NAME, TOKI_TEMPLATE]
    cmds:
      # create golang stuff
      - cd {{.USER_WORKING_DIR}} && mkdir -p {{.TOKI_NAME}} && cd {{.TOKI_NAME}}
      
      - cd {{.USER_WORKING_DIR}}/{{.TOKI_NAME}} && go mod init {{.TOKI_NAME}}
      - cd {{.USER_WORKING_DIR}}/{{.TOKI_NAME}} && go mod tidy

      # in case your in a mono repo.
      - cd {{.USER_WORKING_DIR}}/{{.TOKI_NAME}} && touch go.work && go work use .
      - cd {{.USER_WORKING_DIR}}/{{.TOKI_NAME}} && go work use .

      # injects a main.go template. Assumes on disk. Can easily pull from repo using got also.
      - cd {{.USER_WORKING_DIR}} && cp {{.TOKI_TEMPLATE}} {{.USER_WORKING_DIR}}/{{.TOKI_NAME}}/main.go
      # in main.go change the module import name to match the {{.TOKI_NAME}}
      - go install github.com/webdevops/go-replace@latest
      - go-replace --mode=replace -s 'TOKI_NAME' -r '{{.TOKI_NAME}}' {{.USER_WORKING_DIR}}/{{.TOKI_NAME}}/main.go

  run:init:del:
    desc: delete toki project.
    cmds:
      - cd {{.USER_WORKING_DIR}} && rm -rf {{.TOKI_NAME}}

### gen

  run:gen:help:
    desc: gen help
    cmds:
      - cd {{.USER_WORKING_DIR}} && toki generate -h

  run:gen:default:
    desc: gen default language bundle
    cmds:
      # Our default locale is en.
      - cd {{.USER_WORKING_DIR}} && toki generate -l en
      - cd {{.USER_WORKING_DIR}} && go mod tidy
    verbose: true

  run:gen:watch:
    desc: gen default language bundle in watch mode.
    watch: true
    sources: 
      - '**/*main.go'
    generates:
      - 'tokibundle/**/*'
    cmds:
      - cd {{.USER_WORKING_DIR}} && task run:gen:default
    verbose: true

  run:gen:all:
    desc: gen other language bundles
    cmds:
      # generate the other langs we use.
      # NOT possible yet with TOKI ? 
      - cd {{.USER_WORKING_DIR}} && toki generate de
      - cd {{.USER_WORKING_DIR}} && go mod tidy

### lint 

  run:lint:help:
    desc: lint default language bundle
    cmds:
      - cd {{.USER_WORKING_DIR}} && toki lint -h

  run:lint:default:
    desc: lint default language bundle
    cmds:
      - cd {{.USER_WORKING_DIR}} && toki lint -v -l en