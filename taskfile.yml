# yaml-language-server: $schema=https://taskfile.dev/schema.json

# taskfile.yml

version: '3'

# MUST have this ONLY in root for env variables to work.
dotenv: ['.env', 'all.env', '{{.ENV}}/.env', '{{.HOME}}/.env']

includes:
  local: 
    taskfile: ./remote-taskfile.yml
    flatten: true
  #remote: 
  #  taskfile: https://raw.githubusercontent.com/joeblew999/pb-stack/refs/heads/main/remote-taskfile.yml
  #  flatten: true

  #remote:
  #   https://github.com/saydulaev/taskfile
  #   taskfile: https://raw.githubusercontent.com/saydulaev/taskfile/v1.4.3/Taskfile.yml
  #   flatten: true


tasks:
  default:
    desc: Welcome. 
    cmds:
      - '{{.BASE_TASK_CMD}} --list-all --yes --sort none'
    silent: false

  all:
    desc: for ci. same for local and remote
    cmds:
      - echo ''
      - echo 'Building all ...'


      # base
      - echo 'test base is working ...'
      - '{{.BASE_TASK_CMD}} base:test'

      # git
      - echo 'test git is working ...'
      - '{{.BASE_TASK_CMD}} git'

      # go
      - echo 'test go is working ...'
      - '{{.BASE_TASK_CMD}} go'

      # mod
      #-  echo 'Build my Modules, that my projects need ...'
      #- cd mod/charm/soft_serve && {{.BASE_TASK_CMD}}
      # mod example ( that uses a module task file.)
      #- cd mod/process_compose/example/local && {{.BASE_TASK_CMD}}
      #- cd mod/process_compose/example/remote && {{.BASE_TASK_CMD}} 
      
      # proj
      #- echo 'Build my Projects ...'
      # works, but only with explicit calls, otherwise it self loops.
      #- cd proj/todo-with-task-includes && {{.BASE_TASK_CMD}}
      # work, calling all. I guess because of "remote" at start of calls.
      #- cd proj/todo-with-task-remote && {{.BASE_TASK_CMD}}
    silent: false
