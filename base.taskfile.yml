# yaml-language-server: $schema=https://taskfile.dev/schema.json

# base.taskfile.yml

version: '3'

#interval: 1000ms

# https://taskfile.dev/reference/templating/

vars:

  # Simple wrapper to apply defaults. TODO: Can check version and Upgrade in place ?
  BASE_TASK_CMD: '{{.TASK_EXE}} --yes'

  # Version
  # https://github.com/go-task/task/releases/tag/v3.43.2
  # https://github.com/go-task/task/releases/tag/v3.43.3
  BASE_TASK_VERSION_DEFAULT: v3.43.3
  # For bootstrapping off all.env, so everyone is definitely on the same version.
  #BASE_TASK_VERSION_ENV: v3.42.1
  BASE_TASK_VERSION_WHICH: '{{.TASK_VERSION}}' 

  ### shell
  
  # I want it to work on all OS. On MAC i want 'zsh', but it gives me '/bin/zsh'. Maybe Task has a special function ?
  BASE_SHELL: '{{.SHELL}}'
  
  # E:G: 'darwin'
  BASE_SHELL_OS_NAME: '{{OS}}'
  # E.G: 'arm64'
  BASE_SHELL_OS_ARCH: '{{ARCH}}'

  # binary extension
  BASE_BINARY_EXTENSION: '{{if eq OS "windows"}}.exe{{end}}'

  BASE_BINARY_DARWIN_AMD64_EXTENSION: 'darwin_amd64{{.BASE_BINARY_EXTENSION}}'
  BASE_BINARY_DARWIN_ARM64_EXTENSION: 'darwin_arm64{{.BASE_BINARY_EXTENSION}}'
  BASE_BINARY_DRAGONFLY_AMD64_EXTENSION: 'dragonfly_amd64{{.BASE_BINARY_EXTENSION}}'
  #BASE_BINARY_DRAGONFLY_ARM64_EXTENSION: 'dragonfly_arm64{{.BASE_BINARY_EXTENSION}}'
  BASE_BINARY_FREEBSD_AMD64_EXTENSION: 'freebsd_amd64{{.BASE_BINARY_EXTENSION}}'
  BASE_BINARY_FREEBSD_ARM64_EXTENSION: 'freebsd_arm64{{.BASE_BINARY_EXTENSION}}'
  BASE_BINARY_LINUX_AMD64_EXTENSION: 'linux_amd64{{.BASE_BINARY_EXTENSION}}'
  BASE_BINARY_LINUX_ARM64_EXTENSION: 'linux_arm64{{.BASE_BINARY_EXTENSION}}'
  BASE_BINARY_NETBSD_AMD64_EXTENSION: 'netbsd_amd64{{.BASE_BINARY_EXTENSION}}'
  BASE_BINARY_NETBSD_ARM64_EXTENSION: 'netbsd_arm64{{.BASE_BINARY_EXTENSION}}'
  BASE_BINARY_OPENBSD_AMD64_EXTENSION: 'openbsd_amd64{{.BASE_BINARY_EXTENSION}}'
  BASE_BINARY_OPENBSD_ARM64_EXTENSION: 'openbsd_arm64{{.BASE_BINARY_EXTENSION}}'
  BASE_BINARY_WINDOWS_AMD64_EXTENSION: 'windows_amd64{{.BASE_BINARY_EXTENSION}}'
  BASE_BINARY_WINDOWS_ARM64_EXTENSION: 'windows_arm64{{.BASE_BINARY_EXTENSION}}'

  # wasm and wasi
  BASE_BINARY_JS_WASM_EXTENSION: 'js.wasm'
  BASE_BINARY_JS_WASI_EXTENSION: 'js.wasi'

  # packaging
  BASE_PACK_EXT_ANDROID_AMD64: 'android_amd64.apk'
  BASE_PACK_EXT_ANDROID_ARM64: 'android_arm64.apk'
  # Should be a .pkg
  BASE_PACK_EXT_DARWIN_AMD64: 'darwin_amd64.app'
  BASE_PACK_EXT_DARWIN_ARM64: 'darwin_arm64.app'

  BASE_PACK_EXT_IOS_AMD64: 'ios_amd64.app'
  BASE_PACK_EXT_IOS_ARM64: 'ios_arm64.ipa'
  # there is no bundle ? check wails
  BASE_PACK_EXT_WINDOWS_AMD64: 'windows_amd64.msi'
  BASE_PACK_EXT_WINDOWS_ARM64: 'windows_arm64.msi'

  

  # base shell tools.

  # bun
  BASE_SHELL_BUN_BIN_NAME: 'shell-bun{{.BASE_BINARY_EXTENSION}}'
  # https://github.com/oven-sh/bun/releases/tag/bun-v1.2.10
  BASE_SHELL_BUN_BIN_VERSION: latest

  # arc
  # https://github.com/jm33-m0/arc
  BASE_SHELL_ARC_BIN_NAME: 'shell-arc{{.BASE_BINARY_EXTENSION}}'
  # https://github.com/jm33-m0/arc/releases/tag/v2.0.1
  BASE_SHELL_ARC_BIN_VERSION: v2.0.1

  # regress
  BASE_SHELL_REDRESS_BIN_NAME: 'shell-redress{{.BASE_BINARY_EXTENSION}}'
  # https://github.com/goretk/redress/releases/tag/v1.2.24
  BASE_SHELL_REDRESS_BIN_VERSION: v1.2.24

  # replace
  BASE_SHELL_REPLACE_BIN_NAME: 'shell-replace{{.BASE_BINARY_EXTENSION}}'
  BASE_SHELL_REPLACE_BIN_VERSION: latest

  # tree
  BASE_SHELL_TREE_BIN_NAME: 'shell-tree{{.BASE_BINARY_EXTENSION}}'
  BASE_SHELL_TREE_BIN_VERSION: latest

  # wgot
  BASE_SHELL_WGOT_BIN_NAME: 'shell-wgot{{.BASE_BINARY_EXTENSION}}'
  BASE_SHELL_WGOT_BIN_VERSION: latest

  # which
  BASE_SHELL_WHICH_BIN_NAME: 'shell-which{{.BASE_BINARY_EXTENSION}}'
  BASE_SHELL_WHICH_BIN_VERSION: latest


  # OS User
  # E.G: '/Users/apple'
  #BASE_HOME_PATH: '{{.HOME}}'
  BASE_HOME_PATH: '~'


  # E.G: 'apple'
  BASE_HOME_NAME: '{{.USER}}'

  # dot folder conventions for all modules and projects

  # Root of the repo.
  BASE_GITROOT_PATH: '{{.GIT_VAR_ROOT_PATH}}'

    

  # The SRC is where a developer does their the git clone into.
  # "base" FAILS on windows. I get: c:Usersadmingosrcgithubjoeblew99pb-stack
  BASE_SRC_NAME: '{{base .USER_WORKING_DIR}}'
  BASE_SRC_PATH: '{{.USER_WORKING_DIR}}'

  # The BIN folder is above the SRC.
  BASE_BIN_NAME: '.bin'
  #BASE_BIN_PATH: '{{.BASE_SRC_PATH}}/{{.BASE_BIN_NAME}}'
  BASE_BIN_PATH: '{{joinPath .BASE_SRC_PATH .BASE_BIN_NAME }}'

  
  # The DEP folder is at the root of the git root, as these are shared. 
  BASE_DEP_NAME: '.dep'
  #BASE_DEP_PATH: '{{.BASE_GITROOT_PATH}}/{{.BASE_DEP_NAME}}'
  # For now we put deps into GOPATH bin, until we resolve the cross platform ENV path issue
  BASE_DEP_PATH: '{{.GO_ENV_BIN_PATH}}'

  # The PACK folder is above the SRC.
  BASE_PACK_NAME: '.pack'
  #BASE_PACK_PATH: '{{.BASE_SRC_PATH}}/{{.BASE_PACK_NAME}}'
  BASE_PACK_PATH: '{{joinPath .BASE_SRC_PATH .BASE_PACK_NAME }}'

  # The PACK folder is above the SRC.
  BASE_TMP_NAME: '.tmp'
  #BASE_PACK_PATH: '{{.BASE_SRC_PATH}}/{{.BASE_TMP_NAME}}'
  BASE_TMP_PATH: '{{joinPath .BASE_SRC_PATH .BASE_TMP_NAME }}'

  #BASE_ENV_PATH: '{{.PATH}}'
  


env:
  # https://github.com/go-task/task/issues/202
  # https://github.com/go-task/task/issues/2164

  # I want to add these 2 paths to the PATH, so that the shell can find the binaries.
  
  # Linux: nope.
  

  # Darwin - works both locally and in Github CI.
  #PATH: '{{.PATH}}:{{.BASE_DEP_PATH}}:{{.BASE_BIN_PATH}}'
  
  # windows ?
  # set PATH=%PATH%;C:\your\path\here\
  #  sh: '{{.BASE_DEP_PATH}};{{.BASE_BIN_PATH}}'
  
tasks:
  default:
    desc: base print
    cmds:
      - echo ''
      
      - echo ''
      - echo '- shell'
      - echo 'BASE_SHELL:'            {{.BASE_SHELL}}
      - echo 'BASE_SHELL_OS_NAME:'    {{.BASE_SHELL_OS_NAME}}
      - echo 'BASE_SHELL_OS_ARCH:'    {{.BASE_SHELL_OS_ARCH}}
      - echo ''
      - echo '- binary'
      - echo 'BASE_BINARY_EXTENSION:' {{.BASE_BINARY_EXTENSION}}
      - echo ''
      - echo '- user'
      - echo 'BASE_HOME_PATH:'        {{.BASE_HOME_PATH}}
      - echo 'BASE_HOME_NAME:'        {{.BASE_HOME_NAME}}
      - echo ''
      - echo '- dot folders'
      - echo 'BASE_GITROOT_PATH:'     {{shellQuote .BASE_GITROOT_PATH}}
      - echo ''
      - echo 'BASE_SRC_NAME:'         {{.BASE_SRC_NAME}}
      - echo 'BASE_SRC_PATH:'         {{shellQuote .BASE_SRC_PATH}}
      - echo ''
      - echo 'BASE_BIN_NAME:'         {{.BASE_BIN_NAME}}
      - echo 'BASE_BIN_PATH:'         {{shellQuote .BASE_BIN_PATH}} 
      - echo ''
      - echo 'BASE_DEP_NAME:'         {{.BASE_DEP_NAME}}
      - echo 'BASE_DEP_PATH:'         {{shellQuote .BASE_DEP_PATH}}
      - echo ''
      - echo 'BASE_PACK_NAME:'        {{.BASE_PACK_NAME}}
      - echo 'BASE_PACK_PATH:'        {{shellQuote .BASE_PACK_PATH}}
      - echo ''
      - echo 'BASE_TMP_NAME:'        {{.BASE_TMP_NAME}}
      - echo 'BASE_TMP_PATH:'        {{shellQuote .BASE_TMP_PATH}}
      - echo ''
      #- echo 'BASE_ENV_PATH:'         {{.BASE_ENV_PATH}}
      - echo ''
      - echo '- env path'
      #- echo 'PATH:'                  {{.PATH}}
      - echo ''
      - echo '- task'
      - echo ''
      # So we can upgrade task on the fly.
      - echo 'BASE_TASK_VERSION_DEFAULT:'    {{.BASE_TASK_VERSION_DEFAULT}}
      - echo 'BASE_TASK_VERSION_ENV:'        {{.BASE_TASK_VERSION_ENV}}
      - echo 'BASE_TASK_VERSION_WHICH:'      {{.BASE_TASK_VERSION_WHICH}}
      - echo ''
      - echo 'BASE_TASK_CMD:'         {{.BASE_TASK_CMD}}
      - echo ''
      - echo '- task experiments'
      - '{{.BASE_TASK_CMD}} --experiments'
      - echo ''
      # Task allows you to configure some behavior using environment variables. 
      # https://taskfile.dev/reference/environment
      - echo '- task env'
      - echo 'TASK_TEMP_DIR:'         {{.TASK_TEMP_DIR}}
      - echo 'TASK_REMOTE_DIR:'       {{.TASK_REMOTE_DIR}}
      - echo 'TASK_OFFLINE:'          {{.TASK_OFFLINE}}
      - echo 'FORCE_COLOR:'           {{.FORCE_COLOR}}
      - echo ''
      # https://taskfile.dev/reference/templating/#special-variables
      - echo '- task vars'
      # Contain all extra arguments passed after -- when calling Task through the CLI.
      - echo 'CLI_ARGS:'              {{.CLI_ARGS}}
      # A boolean containing whether the --force or --force-all flags were set.
      - echo 'CLI_FORCE:'             {{.CLI_FORCE}}
      # A boolean containing whether the --silent flag was set.
      - echo 'CLI_SILENT:'            {{.CLI_SILENT}}
      # A boolean containing whether the --verbose flag was set.
      - echo 'CLI_VERBOSE:'           {{.CLI_VERBOSE}}
      # A boolean containing whether the --offline flag was set.
      - echo 'CLI_OFFLINE:'           {{.CLI_OFFLINE}}
      - echo ''
      # The name of the current task.
      - echo 'The name of the current task:'  
      - echo 'TASK:'                  {{.TASK}}
      # The alias used for the current task, otherwise matches TASK.
      - echo 'The alias used for the current task, otherwise matches TASK:'  
      - echo 'ALIAS:'                 {{.ALIAS}}
      # The Task executable name or path.
      - echo 'TASK_EXE:'              {{.TASK_EXE}}
      #- echo 'TASK_EXE shellQuote:'   {{shellQuote .TASK_EXE}}
      # The absolute path of the root Taskfile
      - echo 'ROOT_TASKFILE:'         {{shellQuote .ROOT_TASKFILE}}
      # The absolute path of the root Taskfile directory
      - echo 'ROOT_DIR:'              {{shellQuote .ROOT_DIR}}
      # The absolute path of the included Taskfile.
      - echo 'TASKFILE:'              {{shellQuote .TASKFILE}}
      # The absolute path of the included Taskfile directory.
      - echo 'TASKFILE_DIR:'          {{shellQuote .TASKFILE_DIR}}
      # The absolute path of the directory where the task is executed.
      - echo 'TASK_DIR:'              {{shellQuote .TASK_DIR}}
      # The absolute path of the directory task was called from.
      - echo 'USER_WORKING_DIR:'      {{shellQuote .USER_WORKING_DIR}}
      # The checksum of the files listed in sources. Only available within the status prop and if method is set to checksum.
      - echo 'CHECKSUM:'              {{.CHECKSUM}}
      # The date object of the greatest timestamp of the files listed in sources. Only available within the status prop and if method is set to timestamp.
      - echo 'TIMESTAMP:'             {{.TIMESTAMP}}
      # The current version of task.
      - echo 'TASK_VERSION:'          {{.TASK_VERSION}}
      # The value of the current iteration when using the for property. Can be changed to a different variable name using as:.
      - echo 'ITEM:'                  {{.ITEM}}
      # Available exclusively inside the defer: command. Contains the failed command exit code. Only set when non-zero.
      - echo 'EXIT_CODE:'             {{.EXIT_CODE}}
    silent: true

  test:
    desc: checks that base is working.
    cmds:
      - echo ''
      - echo 'testing base  ...'
      - '{{.BASE_TASK_CMD}} base:upgrade'
      - '{{.BASE_TASK_CMD}} base:tools-print'
      - '{{.BASE_TASK_CMD}} base:tools'
      - '{{.BASE_TASK_CMD}} base:tools-print'
      - '{{.BASE_TASK_CMD}} base:shell-os-print'
      - '{{.BASE_TASK_CMD}} base:shell-which-test'
    silent: false

  shell-os-print:
    desc: print the OS and ARCH, to check the shell is working.
    cmds:
      - cmd: echo 'on darwin/amd64'
        platforms: [darwin/amd64]
      - cmd: echo 'on darwin/arm64'
        platforms: [darwin/arm64]

      - cmd: echo 'on linux/amd64'
        platforms: [linux/amd64]
      - cmd: echo 'on linux/arm64'
        platforms: [linux/arm64]

      - cmd: echo 'on windows/amd64'
        platforms: [windows/amd64]
      - cmd: echo 'on windows/arm64'
        platforms: [windows/arm64]

      # exotics
      - cmd: echo 'on openbsd, dragonfly, freebsd, netbsd'
        platforms: [openbsd, dragonfly, freebsd, netbsd]

    
  upgrade:
    desc: upgrades task itself to what is in the all.env
    cmds:
      - echo ''
      - echo 'Upgrading base ...'
      - echo ''
      - echo '1. Installing Task ...'
      - echo 'BASE_TASK_VERSION_DEFAULT:'   {{.BASE_TASK_VERSION_DEFAULT}}
      - '{{.GO_BIN_NAME}} install github.com/go-task/task/v3/cmd/task@{{.BASE_TASK_VERSION_DEFAULT}}'
      # https://github.com/aleksandersh/task-tui
      - echo ''
      - echo '2. Installing task-tui ...'
      - '{{.GO_BIN_NAME}} install github.com/aleksandersh/task-tui@latest'
      # https://github.com/titpetric/task-ui
      - echo ''
      - echo '3. Installing task-ui ...'
      - '{{.GO_BIN_NAME}} install github.com/titpetric/task-ui@latest'

      - echo ''
      - echo ''
    silent: false

  path:
    desc: modifies the shell PATH, adding our special Dot folders.
    cmds:
      # no idea if this works at all...
      - cmd: export '{{.PATH}}:{{.BASE_DEP_PATH}}:{{.BASE_BIN_PATH}}'
        platforms: [darwin]
      - cmd: export '{{.PATH}}:{{.BASE_DEP_PATH}}:{{.BASE_BIN_PATH}}'
        platforms: [linux]
      - cmd: export '{{.PATH}}:{{.BASE_DEP_PATH}}:{{.BASE_BIN_PATH}}'
        platforms: [windows]

  bin-del:
    desc: delete .bin for proj
    cmds:
      - rm -rf {{.BASE_BIN_PATH}}


  clean:
    desc: base clean, cleans the base folders.
    cmds:
      - echo ''
      - echo 'cleaning all base folders ...'
      - rm -rf ./*/{{.BASE_BIN_NAME}}
      #- rm -rf *{{.BASE_DEP_PATH}}
      - rm -rf ./*/{{.BASE_PACK_NAME}}
      - rm -rf ./*/{{.BASE_TMP_NAME}}
    silent: false
  clean:dry:
    cmds:
      - echo ''
      - echo 'DRY cleaning base folders...'
      - ls -al ./*/{{.BASE_BIN_NAME}}
  clean:list:
    desc: base clean list, lists the contents of the base folders.
    cmds:
      - echo ''
      - echo 'cleaning base folders...'
      
      - '{{.BASE_TASK_CMD}} base:shell-tree -- {{.BASE_BIN_PATH}}'
      #- '{{.BASE_SHELL_TREE_BIN_NAME}} {{.BASE_BIN_PATH}}'
      - '{{.BASE_TASK_CMD}} base:shell-tree -- {{.BASE_DEP_PATH}}'
      #- '{{.BASE_SHELL_TREE_BIN_NAME}} {{.BASE_DEP_PATH}}'
      - '{{.BASE_TASK_CMD}} base:shell-tree -- {{.BASE_PACK_PATH}}'
      #- '{{.BASE_SHELL_TREE_BIN_NAME}} {{.BASE_PACK_PATH}}'
    silent: true

  tools:
    desc: base:tools, installs shell level tools into .dep. These get packed into .pack when we package later, so that the identical task files work at runtime too.
    cmds:
      - echo ''
      - echo 'installing base shell tools ...'
      - echo ''
      - echo '1. Creating base folders ...'
      - echo '.bin ...'
      - mkdir {{.BASE_BIN_PATH}}
      - echo '.dep ...'
      - mkdir {{.BASE_DEP_PATH}}
      - echo '.pack ...'
      - mkdir {{.BASE_PACK_PATH}}
      - echo ''
      - echo '2. Installing base shell tools ...'
      - echo ''
      - '{{.BASE_TASK_CMD}} base:shell-which-dep'
      - echo ''
      - '{{.BASE_TASK_CMD}} base:shell-arc-dep'
      - '{{.BASE_TASK_CMD}} base:shell-tree-dep'
      - '{{.BASE_TASK_CMD}} base:shell-wgot-dep'
      - '{{.BASE_TASK_CMD}} base:shell-replace-dep'
      - '{{.BASE_TASK_CMD}} base:shell-redress-dep'
    status:
      - test -f {{.BASE_BIN_PATH}}

      
      - echo ''
     
  tools-print:
    desc: prints the base shell tools
    cmds:
      - echo ''
      - echo 'printing the tool names only ...'
      - echo 'BASE_SHELL_WHICH_BIN_NAME:'             {{.BASE_SHELL_WHICH_BIN_NAME}}
      - echo 'BASE_SHELL_WHICH_BIN_VERSION:'          {{.BASE_SHELL_WHICH_BIN_VERSION}}
      
      - echo ''
      - echo 'BASE_SHELL_BUN_BIN_NAME:'           {{.BASE_SHELL_BUN_BIN_NAME}}
      - echo 'BASE_SHELL_REPLACE_BIN_NAME:'       {{.BASE_SHELL_REPLACE_BIN_NAME}}
      - echo 'BASE_SHELL_REDRESS_BIN_NAME:'       {{.BASE_SHELL_REDRESS_BIN_NAME}}
      - echo 'BASE_SHELL_TREE_BIN_NAME:'          {{.BASE_SHELL_TREE_BIN_NAME}}
      - echo 'BASE_SHELL_WGOT_BIN_NAME:'          {{.BASE_SHELL_WGOT_BIN_NAME}}
      - echo ''
    silent: true

  

  shell-arc-dep:
    #desc: installs arc, if not present.
    cmds:
      - echo '- arc tool ...'
      # https://github.com/jm33-m0/arc
      - '{{.GO_BIN_NAME}} install github.com/jm33-m0/arc/v2/cmd/arc@{{.BASE_SHELL_ARC_BIN_VERSION}}'
      - mv {{.GO_ENV_BIN_PATH}}/arc{{.BASE_BINARY_EXTENSION}} {{.BASE_DEP_PATH}}/{{.BASE_SHELL_ARC_BIN_NAME}}
      - echo ''
  shell-arc-dep-del:
    cmds:
      - rm -rf {{.BASE_DEP_PATH}}/{{.BASE_SHELL_ARC_BIN_NAME}}
  shell-arc:
    cmds:
      - '{{.BASE_SHELL_ARC_BIN_NAME}} -h'
  shell-arc-extract:
    cmds:
      - '{{.BASE_SHELL_ARC_BIN_NAME}} extract -f {{.CLI_ARGS}}'
  shell-arc-extract-tocwd:
    cmds:
      - mkdir -p {{.BASE_SRC_PATH}}
      - '{{.BASE_SHELL_ARC_BIN_NAME}} extract -f {{.BASE_SRC_PATH}}/{{.CLI_ARGS}} {{.BASE_SRC_PATH}}'
  shell-arc-extract-totmp:
    cmds:
      - mkdir -p {{.BASE_TMP_PATH}}
      - '{{.BASE_SHELL_ARC_BIN_NAME}} extract -f {{.BASE_TMP_PATH}}/{{.CLI_ARGS}} {{.BASE_TMP_PATH}}'



  shell-bun-dep:
    #desc: installs bun, if not present.
    cmds:
      - echo '- bun tool ...'
      # https://github.com/oven-sh/bun
      - '{{.GO_BIN_NAME}} install github.com/oven-sh/bun/cmd/bun@{{.BASE_SHELL_BUN_BIN_VERSION}}'
      - mv {{.GO_ENV_BIN_PATH}}/bun{{.BASE_BINARY_EXTENSION}} {{.BASE_DEP_PATH}}/{{.BASE_SHELL_BUN_BIN_NAME}}
      - echo ''



  shell-redress-dep:
    desc: redress is a cross platform **redress** command.
    cmds:
      - echo '- redress tool ...'
      # https://github.com/goretk/redress
      - '{{.GO_BIN_NAME}} install github.com/goretk/redress@{{.BASE_SHELL_REDRESS_BIN_VERSION}}'
      - mv {{.GO_ENV_BIN_PATH}}/redress{{.BASE_BINARY_EXTENSION}} {{.BASE_DEP_PATH}}/{{.BASE_SHELL_REDRESS_BIN_NAME}}
      - echo ''

  shell-redress-dep:
    desc: redress is a cross platform **redress** command.
    cmds:
      - echo '- redress tool ...'
      # https://github.com/goretk/redress
      - '{{.GO_BIN_NAME}} install github.com/goretk/redress@{{.BASE_SHELL_REDRESS_BIN_VERSION}}'
      - mv {{.GO_ENV_BIN_PATH}}/redress{{.BASE_BINARY_EXTENSION}} {{.BASE_DEP_PATH}}/{{.BASE_SHELL_REDRESS_BIN_NAME}}
      - echo ''
  shell-redress-h:
    desc: redress is a cross platform **redress** command.
    cmds:
      - '{{.BASE_SHELL_REDRESS_BIN_NAME}} --help'
  shell-redress-version:
    cmds:
      - '{{.BASE_SHELL_REDRESS_BIN_NAME}} version'
  shell-redress:
    desc: redress is a cross platform **redress** command. E.G task base:shell-redress -- task
    cmds:
      - '{{.BASE_TASK_CMD}} base:shell-redress-dep'
      - '{{.BASE_SHELL_REDRESS_BIN_NAME}} version {{.CLI_ARGS}}'
      - '{{.BASE_SHELL_REDRESS_BIN_NAME}} gomod {{.CLI_ARGS}}'
      - '{{.BASE_SHELL_REDRESS_BIN_NAME}} info {{.CLI_ARGS}}'
      - '{{.BASE_SHELL_REDRESS_BIN_NAME}} packages {{.CLI_ARGS}}'
      - '{{.BASE_SHELL_REDRESS_BIN_NAME}} moduledata {{.CLI_ARGS}}'
      #- '{{.BASE_SHELL_REDRESS_BIN_NAME}} types all {{.CLI_ARGS}}'
      #- '{{.BASE_SHELL_REDRESS_BIN_NAME}} source {{.CLI_ARGS}}'
  shell-redress-test:
    cmds:
      # The fully reflective version does not work. How to EVAL the args passed in ?
      #- '{{.TASK_EXE}} base:shell-redress -- /Users/apple/workspace/go/bin/task'
      #- '{{.TASK_EXE}} base:shell-redress -- {{.TASK_EXE}} base:shell-which -- {{.TASK_EXE}}'
      


  shell-replace-dep:
    desc: nstalls a cross platform **replace** command.
    cmds:
      - echo '- replace tool ...'
      # https://github.com/webdevops/go-replace
      - '{{.GO_BIN_NAME}} install github.com/webdevops/go-replace@{{.BASE_SHELL_REPLACE_BIN_VERSION}}'
      - mv {{.GO_ENV_BIN_PATH}}/go-replace{{.BASE_BINARY_EXTENSION}} {{.BASE_DEP_PATH}}/{{.BASE_SHELL_REPLACE_BIN_NAME}}
      - echo ''
  shell-replace-h:
    desc: replace is a cross platform **replace** command.
    cmds:
      - '{{.BASE_SHELL_REPLACE_BIN_NAME}} --help'
  shell-replace:
    desc: replace is a cross platform **replace** command. E.G task base:shell-replace -- aa
    cmds:
      - '{{.BASE_TASK_CMD}} base:shell-replace-dep'
      - '{{.BASE_SHELL_REPLACE_BIN_NAME}} {{.CLI_ARGS}}'
      


  shell-tree-dep:
    desc: shell-dep installs a cross platform **tree** command.
    cmds:
      - echo ''
      - echo '- tree tool ...'
      # https://github.com/a8m/tree/cmd/tree
      - '{{.GO_BIN_NAME}} install github.com/a8m/tree/cmd/tree@{{.BASE_SHELL_TREE_BIN_VERSION}}'
      - ls {{.GO_ENV_BIN_PATH}}
      - mv {{.GO_ENV_BIN_PATH}}/tree{{.BASE_BINARY_EXTENSION}} {{.BASE_DEP_PATH}}/{{.BASE_SHELL_TREE_BIN_NAME}}
      - echo ''
  shell-tree-h:
    desc: tree is a cross platform **tree** command.
    cmds:
      - '{{.BASE_SHELL_TREE_BIN_NAME}} --help'
  shell-tree:
    desc: tree is a cross platform **tree** command. E.G task base:shell-tree -- {{.BASE_BIN_PATH}}
    cmds:
      - '{{.BASE_TASK_CMD}} base:shell-tree-dep'
      - '{{.BASE_SHELL_TREE_BIN_NAME}} -a -l --dirsfirst -C {{.CLI_ARGS}}'
    silent: true



  shell-wgot-dep:
    desc: installs wgot, if not present.
    cmds:
       - echo '- wgot tool ...'
      # https://github.com/melbahja/got/forks
      # https://github.com/bitrise-io/got
      # https://github.com/PokeGuys/got
       - '{{.GO_BIN_NAME}} install github.com/pokeguys/got/cmd/wgot@{{.BASE_SHELL_WGOT_BIN_VERSION}}'
       - mv {{.GO_ENV_BIN_PATH}}/wgot{{.BASE_BINARY_EXTENSION}} {{.BASE_DEP_PATH}}/{{.BASE_SHELL_WGOT_BIN_NAME}}
       - echo ''
  shell-wgot-h:
    desc: wgot is a cross platform **wget** command.
    cmds:
      - '{{.BASE_SHELL_WGOT_BIN_NAME}} --help'
  shell-wgot:
    desc: wgot pulls files over http. E:G task base:shell-wgot -- https://example.com/file.mp4 
    cmds:
      # https://github.com/bitrise-io/got
      # got -o /path/to/save https://example.com/file.mp4
      - '{{.BASE_TASK_CMD}} base:shell-wgot-dep'
      - '{{.BASE_SHELL_WGOT_BIN_NAME}} {{.CLI_ARGS}}'
  shell-wgot-todep:
    desc: wgot pulls files over http and places in .dep BASE_DEP_PATH. E:G task base:shell-wgot -- https://example.com/file.mp4 
    cmds:
      # https://github.com/bitrise-io/got
      # got -o /path/to/save https://example.com/file.mp4
      - '{{.BASE_TASK_CMD}} base:shell-wgot-dep'
      - '{{.BASE_SHELL_WGOT_BIN_NAME}} {{.CLI_ARGS}} --dir {{.BASE_DEP_PATH}}'
  shell-wgot-tocwd:
    desc: wgot pulls files over http and places the file in CWD BASE_SRC_PATH. E:G task base:shell-wgot -- https://example.com/file.mp4 
    cmds:
      # https://github.com/bitrise-io/got
      # got -o /path/to/save https://example.com/file.mp4
      - '{{.BASE_TASK_CMD}} base:shell-wgot-dep'
      - '{{.BASE_SHELL_WGOT_BIN_NAME}} --dir {{.BASE_SRC_PATH}} {{.CLI_ARGS}} '
  shell-wgot-totmp:
    desc: wgot pulls files over http and places the file in CWD BASE_TMP_PATH.
    cmds:
      # https://github.com/bitrise-io/got
      # got -o /path/to/save https://example.com/file.mp4
      - '{{.BASE_TASK_CMD}} base:shell-wgot-dep'
      - '{{.BASE_SHELL_WGOT_BIN_NAME}} --dir {{.BASE_TMP_PATH}} {{.CLI_ARGS}} '
  shell-wgot-github-releases-tocwd:
    desc: pulls the github releases list for a repo. E.G task base:shell-wgot-github-releases-tocwd -- https://api.github.com/repos/OWNER/REPO/releases/tags/TAG
    cmds:
      # docs: https://docs.github.com/en/rest/releases/releases?apiVersion=2022-11-28#get-a-release-by-tag-name
      # template: # https://api.github.com/repos/OWNER/REPO/releases/tags/TAG
      - '{{.BASE_TASK_CMD}} base:shell-wgot-dep'
      - '{{.BASE_SHELL_WGOT_BIN_NAME}} --dir {{.BASE_SRC_PATH}} --output github-releases-list.json --header "Accept: application/vnd.github+json, Authorization: Bearer {{.GITHUB_TOKEN}}, X-GitHub-Api-Version: 2022-11-28" {{.CLI_ARGS}} '
    



  shell-which-print:
    desc: prints the which tool name only.
    cmds:
      - echo ''
      - echo 'printing the which tool name ...'
      - echo 'BASE_SHELL_WHICH_BIN_NAME:'               {{.BASE_SHELL_WHICH_BIN_NAME}}
      - echo 'BASE_SHELL_WHICH_BIN_VERSION:'            {{.BASE_SHELL_WHICH_BIN_VERSION}}
      - echo ''
      - echo 'BASE_SHELL_WHICH_BIN_WHICH:'              
      - which {{.BASE_SHELL_WHICH_BIN_NAME}}
      - echo 'BASE_SHELL_WHICH_BIN_WHICH_VERSION:'      
      - '{{.BASE_SHELL_WHICH_BIN_NAME}} -v'
      - echo ''
    silent: true
  shell-which-dep:
    desc: installs which, if not present. The ONLY way we can check is to check the .BIN folder itself, because which will not work if WHICH is not installed :)
    cmds:
      - echo '- which tool dep ...'
      # TODO check is file exists, as WHICH will not work :)

      # https://github.com/hairyhenderson/go-which/tree/main/cmd
      #- env GOBIN={{.BASE_DEP_PATH}} {{.GO_BIN_NAME}} install github.com/hairyhenderson/go-which/cmd/which@{{.BASE_SHELL_WHICH_BIN_VERSION}}
      - '{{.GO_BIN_NAME}} install github.com/hairyhenderson/go-which/cmd/which@{{.BASE_SHELL_WHICH_BIN_VERSION}}'
      # DEBUG: Wtf is windows seeing ??
      #- ls -al {{.GO_ENV_BIN_PATH}}
      #- mv {{.GO_ENV_BIN_PATH}}/which{{.BASE_BINARY_EXTENSION}} {{.BASE_DEP_PATH}}/{{.BASE_SHELL_WHICH_BIN_NAME}}
      # Move-item -Path 'c:\source\data.txt' -destination 'c:\dest\data.txt' -Force
      - cmd: powershell Move-item {{.GO_ENV_BIN_PATH}}/which{{.BASE_BINARY_EXTENSION}} {{.BASE_DEP_PATH}}/{{.BASE_SHELL_WHICH_BIN_NAME}} -Force
        platforms: [windows]
      - cmd: mv {{.GO_ENV_BIN_PATH}}/which{{.BASE_BINARY_EXTENSION}} {{.BASE_DEP_PATH}}/{{.BASE_SHELL_WHICH_BIN_NAME}}
        platforms: [linux, darwin]
      - echo ''
  shell-which-dep-del:
    desc: deletes which
    cmds:
      - echo '- which tool del ...'
      #- rm -rf {{.BASE_DEP_PATH}}/{{.BASE_SHELL_WHICH_BIN_NAME}}
      - cmd: powershell Remove-item {{.BASE_DEP_PATH}}/{{.BASE_SHELL_WHICH_BIN_NAME}}
        platforms: [windows]
      - cmd: rm -f {{.BASE_DEP_PATH}}/{{.BASE_SHELL_WHICH_BIN_NAME}}
        platforms: [linux, darwin]
      - echo ''
  shell-which-h: 
    desc: which is a cross platform **which** command.
    cmds:
      - '{{.BASE_TASK_CMD}} base:shell-which-dep'
      - '{{.BASE_SHELL_WHICH_BIN_NAME}} -h'
  shell-which:
    desc: find a binary based on ARGS. E.G task base:shell-which -- go
    cmds:
      - '{{.BASE_TASK_CMD}} base:shell-which-dep'
      - '{{.BASE_SHELL_WHICH_BIN_NAME}} {{.CLI_ARGS}}'
  shell-which-test:
    desc: which test finds the TASK binary.
    cmds:
      - '{{.BASE_TASK_CMD}} base:shell-which-dep'
      - '{{.BASE_TASK_CMD}} base:shell-which -- {{.TASK_EXE}}'
  
  shell-mkdir-h:
    desc: mkdir is a cross platform **mkdir** command.
    cmds:
      #- '{{if eq OS "windows"}}.exe{{end}}'
      #- mkdir -h


