# yaml-language-server: $schema=https://taskfile.dev/schema.json

version: '3'

#interval: 1000ms

vars:

  ### task

  # Task version to use.
  # Issue: .env variable do not override task variables.
  # https://github.com/go-task/task/releases/tag/v3.42.1
  # https://github.com/go-task/task/releases/tag/v3.39.2

  BASE_TASK_VERSION_DEFAULT: v3.42.1
  # For bootstrapping off all.env, so everyone is definitely on the same version.
  #BASE_TASK_VERSION_ENV: v3.42.1
  # evaluated, ONLY if task is installed.
  BASE_TASK_VERSION_WHICH: '{{.TASK_VERSION}}' 

  # Simple wrapper to apply defaults. TODO: Can check version and Upgrade in place ?
  BASE_TASK_CMD: '{{.TASK_EXE}} --yes'


  ### shell
  
  # E.G: '/bin/zsh'  
  # Issue: this only works on Darwin.
  # TODO: Need a cross platform version 
  BASE_SHELL: '{{.SHELL}}'

  # E:G: 'darwin'
  BASE_SHELL_OS_NAME:
    #sh: uname -s | tr A-Z a-z

  # E.G: 'x86_64'
  BASE_SHELL_OS_ARCH:
    #sh: uname -m | tr A-Z a-z

  # help with cross OS differences, cause u-root is not good enough.
  BASE_SHELL_WHICH_BIN_NAME: shell-which
  BASE_SHELL_WHICH_BIN_VERSION: latest

  BASE_SHELL_REPLACE_BIN_NAME: shell-replace
  BASE_SHELL_REPLACE_BIN_VERSION: latest

  BASE_SHELL_TREE_BIN_NAME: shell-tree
  BASE_SHELL_TREE_BIN_VERSION: latest

  BASE_SHELL_WGOT_BIN_NAME: shell-wgot
  BASE_SHELL_WGOT_BIN_VERSION: latest

  BASE_SHELL_REDRESS_BIN_NAME: shell-redress
  # https://github.com/goretk/redress/releases/tag/v1.2.24
  BASE_SHELL_REDRESS_BIN_VERSION: v1.2.24


  ### binary
  BASE_BINARY_EXTENSION: '{{if eq OS "windows"}}.exe{{end}}'
  

  ### goos
  BASE_GOOS_NAME:
    sh: go env GOOS
  BASE_GOOS_ARCH:
    sh: go env GOARCH

  # OS User
  # E.G: '/Users/apple'
  BASE_HOME: '{{.HOME}}'
  # E.G: 'apple'
  BASE_USER: '{{.USER}}'

  # Project (always named like project root '_' cmd path), as in go projects cmd is the entry point. 


  # Our dot folders.

  # Src variables, that are used quite a bit by other tasks
  BASE_SRC_NAME:
    sh: basename {{.USER_WORKING_DIR}}
  BASE_SRC_PATH: '{{.USER_WORKING_DIR}}'

  # We want BIN near the SRC
  BASE_BIN_NAME: '.bin'
  BASE_BIN_PATH: '{{.BASE_SRC_PATH}}/{{.BASE_BIN_NAME}}'
  
  # We want DEP in root
  BASE_DEP_NAME: '.dep'
  BASE_DEP_PATH: '{{.TASKFILE_DIR}}/{{.BASE_DEP_NAME}}'

  # We want PACKS near the SRC and BIN
  BASE_PACK_NAME: '.pack'
  BASE_PACK_PATH: '{{.BASE_SRC_PATH}}/{{.BASE_PACK_NAME}}'

  # Add .DEP and .BIN to the PATH, so we do not pollute the OS.
  # Windows PS its "$env:Path" get whats on the PATH
  BASE_PATH: '{{.PATH}}:{{.BASE_DEP_PATH}}:{{.BASE_BIN_PATH}}'


env:
  # https://github.com/go-task/task/issues/202

  # export Path to include our .bin and .dep
  #export PATH:=$(PATH):$(BASE_BIN_PATH):$(BASE_DEP_PATH)
  #export PATH:=$(PATH):$(BASE_PWD_BIN)
  # https://github.com/go-task/task/issues/202

  #PATH: '{{.BASE_PATH}}'
  # '{{.PATH}}:{{.BASE_DEP_PATH}}:{{.BASE_BIN_PATH}}'
  # mac
  PATH: '{{.PATH}}:{{.BASE_DEP_PATH}}:{{.BASE_BIN_PATH}}'
  # windows
  # set PATH=%PATH%;C:\your\path\here\
  #  sh: '{{.BASE_DEP_PATH}};{{.BASE_BIN_PATH}}'
  
tasks:
  default:
    desc: base print
    cmds:
      - echo ''
      
      - echo ''
      - echo '- shell'
      - echo 'BASE_SHELL:'            {{.BASE_SHELL}}
      - echo 'BASE_SHELL_OS_NAME:'    {{.BASE_SHELL_OS_NAME}}
      - echo 'BASE_SHELL_OS_ARCH:'    {{.BASE_SHELL_OS_ARCH}}
      - echo ''
      - echo '- binary'
      - echo 'BASE_BINARY_EXTENSION:' {{.BASE_BINARY_EXTENSION}}
      - echo ''
      - echo '- goos'
      - echo 'BASE_GOOS_NAME:'        {{.BASE_GOOS_NAME}}
      - echo 'BASE_GOOS_ARCH:'        {{.BASE_GOOS_ARCH}}
      - echo ''
      - echo '- user'
      - echo 'BASE_HOME:'             {{.BASE_HOME}}
      - echo 'BASE_USER:'             {{.BASE_USER}}
      - echo ''
      - echo '- dot folders'
      - echo 'BASE_SRC_NAME:'         {{.BASE_SRC_NAME}}
      - echo 'BASE_SRC_PATH:'         {{.BASE_SRC_PATH}}
      - echo ''
      - echo 'BASE_BIN_NAME:'         {{.BASE_BIN_NAME}}
      - echo 'BASE_BIN_PATH:'         {{.BASE_BIN_PATH}}
      - echo ''
      - echo 'BASE_DEP_NAME:'         {{.BASE_DEP_NAME}}
      - echo 'BASE_DEP_PATH:'         {{.BASE_DEP_PATH}}
      - echo ''
      - echo 'BASE_PACK_NAME:'        {{.BASE_PACK_NAME}}
      - echo 'BASE_PACK_PATH:'        {{.BASE_PACK_PATH}}
      - echo ''
      - echo '- env path'
      - echo 'PATH:'                  {{.PATH}}
      - echo ''
      - echo 'BASE_PATH:'             {{.BASE_PATH}}
      - echo ''
      - echo ''
      - echo ''
      - echo '- task'
      - echo ''
      # So we can upgrade task on the fly.
      - echo 'BASE_TASK_VERSION_DEFAULT:'    {{.BASE_TASK_VERSION_DEFAULT}}
      - echo 'BASE_TASK_VERSION_ENV:'        {{.BASE_TASK_VERSION_ENV}}
      - echo 'BASE_TASK_VERSION_WHICH:'      {{.BASE_TASK_VERSION_WHICH}}
      - echo ''
      - echo 'BASE_TASK_CMD:'         {{.BASE_TASK_CMD}}
      - echo '
      - echo '- task experiments'
      #- '{{.BASE_TASK_CMD}} --experiments'
      - echo ''
      # Task allows you to configure some behavior using environment variables. 
      # This lists all the environment variables that Task supports.
      # yaml-language-server: $schema=https://taskfile.dev/schema.json/reference/environment/
      - echo '- task env'
      - echo 'TASK_TEMP_DIR:'         {{.TASK_TEMP_DIR}}
      - echo 'TASK_REMOTE_DIR:'       {{.TASK_REMOTE_DIR}}
      - echo 'TASK_OFFLINE:'          {{.TASK_OFFLINE}}
      - echo 'FORCE_COLOR:'           {{.FORCE_COLOR}}
      - echo ''
      # yaml-language-server: $schema=https://taskfile.dev/schema.json/reference/templating/#special-variables
      - echo '- task vars'
      # Contain all extra arguments passed after -- when calling Task through the CLI.
      - echo 'CLI_ARGS:'              {{.CLI_ARGS}}
      # A boolean containing whether the --force or --force-all flags were set.
      - echo 'CLI_FORCE:'             {{.CLI_FORCE}}
      # A boolean containing whether the --silent flag was set.
      - echo 'CLI_SILENT:'            {{.CLI_SILENT}}
      # A boolean containing whether the --verbose flag was set.
      - echo 'CLI_VERBOSE:'           {{.CLI_VERBOSE}}
      # A boolean containing whether the --offline flag was set.
      - echo 'CLI_OFFLINE:'           {{.CLI_OFFLINE}}
      - echo ''
      # The name of the current task.
      - echo 'The name of the current task:'  
      - echo 'TASK:'                  {{.TASK}}
      # The alias used for the current task, otherwise matches TASK.
      - echo 'The alias used for the current task, otherwise matches TASK:'  
      - echo 'ALIAS:'                 {{.ALIAS}}
      # The Task executable name or path.
      - echo 'TASK_EXE:'              {{.TASK_EXE}}
      # The absolute path of the root Taskfile
      - echo 'ROOT_TASKFILE:'         {{.ROOT_TASKFILE}}
      # The absolute path of the root Taskfile directory
      - echo 'ROOT_DIR:'              {{.ROOT_DIR}}
      # The absolute path of the included Taskfile.
      - echo 'TASKFILE:'              {{.TASKFILE}}
      # The absolute path of the included Taskfile directory.
      - echo 'TASKFILE_DIR:'          {{.TASKFILE_DIR}}
      # The absolute path of the directory where the task is executed.
      - echo 'TASK_DIR:'              {{.TASK_DIR}}
      # The absolute path of the directory task was called from.
      - echo 'USER_WORKING_DIR:'      {{.USER_WORKING_DIR}}
      # The checksum of the files listed in sources. Only available within the status prop and if method is set to checksum.
      - echo 'CHECKSUM:'              {{.CHECKSUM}}
      # The date object of the greatest timestamp of the files listed in sources. Only available within the status prop and if method is set to timestamp.
      - echo 'TIMESTAMP:'             {{.TIMESTAMP}}
      # The current version of task.
      - echo 'TASK_VERSION:'          {{.TASK_VERSION}}
      # The value of the current iteration when using the for property. Can be changed to a different variable name using as:.
      - echo 'ITEM:'                  {{.ITEM}}
      # Available exclusively inside the defer: command. Contains the failed command exit code. Only set when non-zero.
      - echo 'EXIT_CODE:'             {{.EXIT_CODE}}
    silent: true

  upgrade:
    desc: base upgrade, upgrades task itself to what is in the all.env
    cmds:
      - echo ''
      - echo 'Upgrading base ...'
      - echo ''
      - echo '1. Installing Task ...'
      - echo 'BASE_TASK_VERSION_ENV:'   {{.BASE_TASK_VERSION_ENV}}
      - '{{.GO_BIN_NAME}} install github.com/go-task/task/v3/cmd/task@{{.BASE_TASK_VERSION_ENV}}'
      - echo ''
    silent: false

  test:
    desc: base test, checks that base is working.
    cmds:
      - echo ''
      - echo 'testing base  ...'
      - '{{.BASE_TASK_CMD}} base:upgrade'
      - '{{.BASE_TASK_CMD}} base:bin'
      - '{{.BASE_TASK_CMD}} base:shell-os-test'
      - '{{.BASE_TASK_CMD}} base:shell-which-shell'
      - '{{.BASE_TASK_CMD}} base:shell-which-test'
    silent: false

  clean:
    desc: base clean, cleans the base folders.
    cmds:
      - echo ''
      - echo 'cleaning base  ...'
      - rm -rf *{{.BASE_BIN_PATH}}
      - rm -rf *{{.BASE_DEP_PATH}}
      - rm -rf *{{.BASE_PACK_PATH}}
    silent: false
  clean-list:
    desc: base clean list, lists what is cleaned from the base folders.
    cmds:
      - echo ''
      - echo 'cleaning base  ...'
      - ls -al {{.BASE_BIN_PATH}}
      - ls -al *{{.BASE_DEP_PATH}}
      - ls -al *{{.BASE_PACK_PATH}}
    silent: false

  bin:
    desc: base:bin, installs shell level components.
    cmds:
      - echo ''
      - echo 'installing base shell tools ...'
      - echo ''
      - echo '1. Creating base folders ...'
      - mkdir -p {{.BASE_BIN_PATH}}
      - mkdir -p {{.BASE_DEP_PATH}}
      - mkdir -p {{.BASE_PACK_PATH}}
      - echo ''
      - echo '2. Installing base shell tools ...'
      - echo ''
      - echo '- which tool ...'
      # https://github.com/hairyhenderson/go-which/tree/main/cmd
      - env GOBIN={{.BASE_DEP_PATH}} {{.GO_BIN_NAME}} install github.com/hairyhenderson/go-which/cmd/which@{{.BASE_SHELL_WHICH_BIN_VERSION}}
      - mv {{.BASE_DEP_PATH}}/which {{.BASE_DEP_PATH}}/{{.BASE_SHELL_WHICH_BIN_NAME}}
      - echo ''
      - echo '- tree tool ...'
      # https://github.com/a8m/tree/cmd/tree
      - env GOBIN={{.BASE_DEP_PATH}} {{.GO_BIN_NAME}} install github.com/a8m/tree/cmd/tree@{{.BASE_SHELL_TREE_BIN_VERSION}}
      - mv {{.BASE_DEP_PATH}}/tree {{.BASE_DEP_PATH}}/{{.BASE_SHELL_TREE_BIN_NAME}}
      - echo '- wgot tool ...'
      # https://github.com/bitrise-io/got
      - env GOBIN={{.BASE_DEP_PATH}} {{.GO_BIN_NAME}} install github.com/bitrise-io/got/cmd/wgot@{{.BASE_SHELL_WGOT_BIN_VERSION}}
      - mv {{.BASE_DEP_PATH}}/wgot {{.BASE_DEP_PATH}}/{{.BASE_SHELL_WGOT_BIN_NAME}}
      - echo '- replace tool ...'
      # https://github.com/webdevops/go-replace
      - env GOBIN={{.BASE_DEP_PATH}} {{.GO_BIN_NAME}} install github.com/webdevops/go-replace@{{.BASE_SHELL_REPLACE_BIN_VERSION}}
      - mv {{.BASE_DEP_PATH}}/go-replace {{.BASE_DEP_PATH}}/{{.BASE_SHELL_REPLACE_BIN_NAME}}
      - echo '- redress tool ...'
      # https://github.com/goretk/redress
      - env GOBIN={{.BASE_DEP_PATH}} {{.GO_BIN_NAME}} install github.com/goretk/redress@{{.BASE_SHELL_REDRESS_BIN_VERSION}}
      - mv {{.BASE_DEP_PATH}}/redress {{.BASE_DEP_PATH}}/{{.BASE_SHELL_REDRESS_BIN_NAME}}

      - echo ''
      - echo 'TODO - add the other tools after we sort out the SHELL and BIN Naming to be cross platform  ...'

  bin-list:
    desc: base bin list, lists what is installed in the bin folders.
    cmds:
      - echo ''
      - echo 'listing base shell tools ...'
      - echo ''
      - '{{.BASE_TASK_CMD}} base:shell-tree -- {{.BASE_BIN_PATH}}'
      - ls -al {{.BASE_BIN_PATH}}
      - ls -al {{.BASE_DEP_PATH}}
      - ls -al {{.BASE_PACK_PATH}}
    silent: false

  bin-del:
    desc: delete .bin for proj
    cmds:
      - rm -rf {{.BASE_BIN_PATH}}

  shell-os-test:
    desc: shell-os is a cross platform switch command. 
    cmds:
      - cmd: echo 'building on windows/arm64'
        platforms: [windows/arm64]
      - cmd: echo 'building on linux/amd64'
        platforms: [linux/amd64]
      - cmd: echo 'building on darwin'
        platforms: [darwin]


  shell-redress-h:
    desc: redress is a cross platform **redress** command.
    cmds:
      - '{{.BASE_SHELL_REDRESS_BIN_NAME}} --help'
  shell-redress-version:
    cmds:
      - '{{.BASE_SHELL_REDRESS_BIN_NAME}} version'
  shell-redress:
    desc: redress is a cross platform **redress** command. E.G task base:shell-redress -- task
    cmds:
      - '{{.BASE_SHELL_REDRESS_BIN_NAME}} version {{.CLI_ARGS}}'
      - '{{.BASE_SHELL_REDRESS_BIN_NAME}} gomod {{.CLI_ARGS}}'
      - '{{.BASE_SHELL_REDRESS_BIN_NAME}} info {{.CLI_ARGS}}'
      - '{{.BASE_SHELL_REDRESS_BIN_NAME}} packages {{.CLI_ARGS}}'
      - '{{.BASE_SHELL_REDRESS_BIN_NAME}} moduledata {{.CLI_ARGS}}'
      #- '{{.BASE_SHELL_REDRESS_BIN_NAME}} types all {{.CLI_ARGS}}'
      #- '{{.BASE_SHELL_REDRESS_BIN_NAME}} source {{.CLI_ARGS}}'
  shell-redress-test:
    cmds:
      # The fully reflective version does not work. How to EVAL the args passed in ?
      #- '{{.TASK_EXE}} base:shell-redress -- /Users/apple/workspace/go/bin/task'
      #- '{{.TASK_EXE}} base:shell-redress -- {{.TASK_EXE}} base:shell-which {{.TASK_EXE}}'
      

  shell-replace-h:
    desc: replace is a cross platform **replace** command.
    cmds:
      - '{{.BASE_SHELL_REPLACE_BIN_NAME}} --help'
  shell-replace:
    desc: replace is a cross platform **replace** command. E.G task base:shell-replace -- aa
    cmds:
      - '{{.BASE_SHELL_REPLACE_BIN_NAME}} {{.CLI_ARGS}}'
      
  shell-tree-h:
    desc: tree is a cross platform **tree** command.
    cmds:
      - '{{.BASE_SHELL_TREE_BIN_NAME}} --help'
  shell-tree:
    desc: tree is a cross platform **tree** command. E.G task base:shell-tree -- {{.BASE_BIN_PATH}}
    cmds:
      - '{{.BASE_SHELL_TREE_BIN_NAME}} -a -l  --dirsfirst -C'


  shell-wgot-h:
    desc: wgot is a cross platform **wget** command.
    cmds:
      - '{{.BASE_SHELL_WGOT_BIN_NAME}} --help'
  shell-wgot:
    desc: wgot is a cross platform **wget** command. E:G task base:shell-wgot -- https://example.com/file.mp4
    cmds:
      # https://github.com/bitrise-io/got
      # got -o /path/to/save https://example.com/file.mp4
      - '{{.BASE_SHELL_WGOT_BIN_NAME}} {{.CLI_ARGS}}'


  shell-which-dep:
    desc: installs which, if not present. The ONLY way we can check is to check the .BIN folder itself, because which will not work if WHICH is not installed :)
    cmds:
      - echo '- which tool dep ...'
      
      # https://github.com/hairyhenderson/go-which/tree/main/cmd
      - env GOBIN={{.BASE_DEP_PATH}} {{.GO_BIN_NAME}} install github.com/hairyhenderson/go-which/cmd/which@{{.BASE_SHELL_WHICH_BIN_VERSION}}
      - mv {{.BASE_DEP_PATH}}/which {{.BASE_DEP_PATH}}/{{.BASE_SHELL_WHICH_BIN_NAME}}
      - echo ''
  shell-which-dep-del:
    desc: deletes which
    cmds:
      - echo '- which tool del ...'
      - rm -rf {{.BASE_DEP_PATH}}/{{.BASE_SHELL_WHICH_BIN_NAME}}
      - echo ''
  shell-which-h: 
    desc: which is a cross platform **which** command.
    cmds:
      - '{{.BASE_TASK_CMD}} base:shell-which-dep'
      - '{{.BASE_SHELL_WHICH_BIN_NAME}} -h'
  shell-which:
    desc: find a binary based on ARGS. E.G task base:shell-which -- go
    cmds:
      - '{{.BASE_TASK_CMD}} base:shell-which-dep'
      - '{{.BASE_SHELL_WHICH_BIN_NAME}} {{.CLI_ARGS}}'
  shell-which-test:
    desc: which test finds the TASK binary.
    cmds:
      - '{{.BASE_TASK_CMD}} base:shell-which-dep'
      - '{{.BASE_TASK_CMD}} base:shell-which -- {{.TASK_EXE}}'
  shell-which-shell: 
    desc: which shell finds the shell binary. FAILS since cant get shell in CI linux yet.
    cmds:
      - '{{.BASE_TASK_CMD}} base:shell-which-dep'
      - '{{.BASE_TASK_CMD}} base:shell-which -- {{.BASE_SHELL}}'
      

