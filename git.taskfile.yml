# yaml-language-server: $schema=https://taskfile.dev/schema.json

# git.taskfile.yml 

### TODO: 

# Check git is installed.

# Can pass in COMMIT Message using 'ENV_VAR='commandline' task main' . https://medium.com/@TianchenW/demystification-of-taskfile-variables-29b751950393

# Make some of this a golang AMP that base installs.

version: '3'

vars:
  ### bins

  # git bin
  GIT_BIN_NAME: 'git{{.BASE_BINARY_EXTENSION}}'
  GIT_BIN_WHICH: ''
    #sh: 'command -v {{.GIT_BIN_NAME}}'
  GIT_BIN_VERSION_WHICH: ''
    #sh: '{{.GIT_BIN_NAME}} -v'

  # ssh bin
  GIT_SSH_BIN_NAME: 'ssh{{.BASE_BINARY_EXTENSION}}'
  GIT_SSH_BIN_WHICH: ''
    #sh: 'command -v {{.GIT_SSH_BIN_NAME}}'
  GIT_SSH_BIN_VERSION_WHICH: ''
    #sh: '{{.GIT_SSH_BIN_NAME}} -V'


  # env ( expected )
  # TODO: Need this to be a VAR, because Operators will need to pull different git repo's using task variables.
  # SO, we need these 2 variables to be the ROOT Git variables, and then for the Non ROOT git variables.
  # That way an Operator has a root repo and then can act on sub reps as that Root Operator.

  ### root

  #GIT_VAR_ROOT_ORG_NAME: 'joeblew999'
  GIT_VAR_ROOT_ORG_NAME: '{{ .GIT_VAR_ROOT_ORG_NAME | default "joeblew999" }}'
  GIT_VAR_ROOT_REPO_NAME: '{{ .GIT_VAR_ROOT_REPO_NAME | default "pb-stack" }}'
  GIT_VAR_ROOT_PATH:
    # BUG: On windows its as forward slashes. Should be back slashes.
    sh: '{{.GIT_BIN_NAME}} rev-parse --show-toplevel'
  GIT_VAR_ROOT_VERSION:
    sh: '{{.GIT_BIN_NAME}} rev-parse HEAD'
  GIT_VAR_ROOT_RELEASE_VERSION: 'latest'
  # EX: https://api.github.com/repos/nats-io/nats-server/releases/tags/{{.NATS_SERVER_BIN_VERSION}}
  GIT_VAR_ROOT_RELEASE_LIST_URL: 'https://api.github.com/repos/{{.GIT_VAR_ROOT_ORG_NAME}}/{{.GIT_VAR_ROOT_REPO_NAME}}/releases/tags/{{.GIT_VAR_ROOT_RELEASE_VERSION}}'



  GIT_VAR_ROOT_SIGNING_USER_NAME: '{{.GIT_VAR_ROOT_ORG_NAME}}'
  GIT_VAR_ROOT_SIGNING_USER_EMAIL: '{{.GIT_VAR_ROOT_ORG_NAME}}@gmail.com'

  # EX: joeblew999_github.com
  GIT_VAR_ROOT_SSH_KEY_PRIVATE_NAME: '{{.GIT_VAR_ROOT_ORG_NAME}}_github.com'
  # EX: joeblew999_github.com.pub
  GIT_VAR_ROOT_SSH_KEY_PUBLIC_NAME: '{{.GIT_VAR_ROOT_ORG_NAME}}_github.com.pub'

  GIT_SSH_CONFIG_NAME: 'config'
  GIT_SSH_CONFIG_PATH: '{{.BASE_HOME_PATH}}/.ssh/{{.GIT_SSH_CONFIG_NAME}}'

  GIT_SSH_HOSTS_NAME: 'known_hosts'
  GIT_SSH_HOSTS_PATH: '{{.BASE_HOME_PATH}}/.ssh/{{.GIT_SSH_HOSTS_NAME}}'



  # GIT_SIGNING_KEY_PRIVATE_PATH=$HOME/.ssh/jowblew999_github.com
  GIT_SIGNING_KEY_PRIVATE_PATH: '{{.BASE_HOME_PATH}}/.ssh/{{.GIT_VAR_ROOT_SSH_KEY_PRIVATE_NAME}}'
  #GIT_SIGNING_KEY_PRIVATE_PATH: '{{joinPath .BASE_HOME_PATH .GIT_SSH_CONFIG_NAME .GIT_VAR_ROOT_SSH_KEY_PRIVATE_NAME}}'
  #GIT_SIGNING_KEY_PRIVATE_PATH: '{{joinPath "xx" .GIT_VAR_ROOT_SSH_KEY_PRIVATE_NAME}}'

  # EX: /Users/apple/.ssh/joeblew999_github.com.pub
  GIT_SIGNING_KEY_PUBLIC_PATH: '{{.BASE_HOME_PATH}}/.ssh/{{.GIT_VAR_ROOT_SSH_KEY_PUBLIC_NAME}}'
  #GIT_SIGNING_KEY_PUBLIC_PATH: '{{joinPath {{.BASE_HOME_PATH}} ".ssh" .GIT_VAR_ROOT_SSH_KEY_PUBLIC_NAME}}'

  
  # ssh based:  https://docs.github.com/en/authentication/managing-commit-signature-verification/telling-git-about-your-signing-key#telling-git-about-your-ssh-key
  GIT_SIGNING_PROGRAM: '{{.GIT_SSH_BIN_NAME}}'
  GIT_SIGNING_FORMAT: '{{.GIT_SSH_BIN_NAME}}'

  ### src ( for pulling repos inside this mono repo )
  # Override via .env
  GIT_VAR_SRC_REPO_URL: '{{ .GIT_VAR_SRC_REPO_URL | default "repo-name-default-from-git.taskfile.yml" }}'
  GIT_VAR_SRC_REPO_NAME: '{{ .GIT_VAR_SRC_REPO_NAME | default "repo-url-default-from-git.taskfile.ym" }}'
  GIT_VAR_SRC_REPO_VERSION: '{{ .GIT_VAR_SRC_REPO_VERSION | default "main" }}'


tasks:
  default:
    desc: git print
    cmds:
      - echo ''
      - echo '- bin'
      - echo '- git bin'
      - echo 'GIT_BIN_NAME:'                      {{.GIT_BIN_NAME}}
      - echo 'GIT_BIN_WHICH:'                     {{shellQuote .GIT_BIN_WHICH}}
      - echo 'GIT_BIN_VERSION_WHICH:'             {{.GIT_BIN_VERSION_WHICH}}
      - echo ''
      - echo '- ssh bin'
      - echo 'GIT_SSH_BIN_NAME:'                  {{.GIT_SSH_BIN_NAME}}
      - echo 'GIT_SSH_BIN_WHICH:'                 {{shellQuote .GIT_SSH_BIN_WHICH}}
      - echo 'GIT_SSH_BIN_VERSION_WHICH:'         {{.GIT_SSH_BIN_VERSION_WHICH}}
      - echo ''
      - echo ''
      - echo '- git root'
      - echo 'GIT_VAR_ROOT_ORG_NAME:'             {{.GIT_VAR_ROOT_ORG_NAME}}
      - echo 'GIT_VAR_ROOT_REPO_NAME:'            {{.GIT_VAR_ROOT_REPO_NAME}}
      - echo 'GIT_VAR_ROOT_PATH:'                 {{shellQuote .GIT_VAR_ROOT_PATH}}
      - echo 'GIT_VAR_ROOT_VERSION:'              {{.GIT_VAR_ROOT_VERSION}}
      - echo 'GIT_VAR_ROOT_RELEASE_VERSION:'      {{.GIT_VAR_ROOT_RELEASE_VERSION}}
      - echo 'GIT_VAR_ROOT_RELEASE_LIST_URL:'     {{.GIT_VAR_ROOT_RELEASE_LIST_URL}}
      - echo ''
      - echo '- ssh config'
      - echo 'GIT_SSH_CONFIG_NAME:'               {{.GIT_SSH_CONFIG_NAME}}
      - echo 'GIT_SSH_CONFIG_PATH:'               {{shellQuote .GIT_SSH_CONFIG_PATH}}
      - echo ''
      - echo '- ssh hosts'
      - echo 'GIT_SSH_HOSTS_NAME:'                {{.GIT_SSH_HOSTS_NAME}}
      - echo 'GIT_SSH_HOSTS_PATH:'                {{shellQuote .GIT_SSH_HOSTS_PATH}}
      - 
      - echo ''
      - echo '- ssh signing'
      - echo 'GIT_VAR_ROOT_SIGNING_USER_NAME:'    {{.GIT_VAR_ROOT_SIGNING_USER_NAME}}
      - echo 'GIT_VAR_ROOT_SIGNING_USER_EMAIL:'   {{.GIT_VAR_ROOT_SIGNING_USER_EMAIL}}
      - echo ''
      - echo 'GIT_VAR_ROOT_SSH_KEY_PRIVATE_NAME:' {{.GIT_VAR_ROOT_SSH_KEY_PRIVATE_NAME}}
      - echo 'GIT_VAR_ROOT_SSH_KEY_PUBLIC_NAME:'  {{.GIT_VAR_ROOT_SSH_KEY_PUBLIC_NAME}}
      - echo ''
      - echo 'GIT_SIGNING_KEY_PRIVATE_PATH:'      {{shellQuote .GIT_SIGNING_KEY_PRIVATE_PATH}}
      - echo 'GIT_SIGNING_KEY_PUBLIC_PATH:'       {{shellQuote .GIT_SIGNING_KEY_PUBLIC_PATH}}
      - echo ''
      - echo 'GIT_SIGNING_PROGRAM:'               {{.GIT_SIGNING_PROGRAM}}
      - echo 'GIT_SIGNING_FORMAT:'                {{.GIT_SIGNING_FORMAT}}
      - echo ''
      - echo ''
      - echo '- git src'
      - echo 'GIT_VAR_SRC_REPO_URL:'              {{.GIT_VAR_SRC_REPO_URL}}
      - echo 'GIT_VAR_SRC_REPO_NAME:'             {{.GIT_VAR_SRC_REPO_NAME}}
      - echo 'GIT_VAR_SRC_REPO_VERSION:'          {{.GIT_VAR_SRC_REPO_VERSION}}
    
      - echo ''
    silent: true

  dep:
    desc: git run any deps needed ...
    cmds:
      - task git:ssh-set
      - task git:sign-set
  dep:which:
    desc: check dep are there returns 0 or 1
    cmds:
      - task base:shell-which -- {{.GIT_BIN_NAME}}

  dep:bin:
      # we dont use this yet. Its not at all ready.
      # https://github.com/go-git/cli  
      # cli
      - go install github.com/go-git/cli/cmd/gogit@latest
      # server
      - go install github.com/go-git/cli/cmd/gogit-http-server@latest
      
  test:
    desc: checks that git is working.
    cmds:
      - echo ''
      - echo 'testing git  ...'
      - task git:dep
      - echo ''
      # git cli.
      #- gogit -h
  test:bin:
    cmds:
      # starts git server. Is still useless
      - gogit-http-server --prefix test .
      # http://localhost:8080
      # http://localhost:8080/test


  status:
    desc: git status
    cmds:
      - cd {{.GIT_VAR_ROOT_PATH}} && {{.GIT_BIN_NAME}} status
    
  config:root:
    desc: git config
    cmds:
      - cd {{.GIT_VAR_ROOT_PATH}} && {{.GIT_BIN_NAME}} config --list --show-scope --show-origin
  config:src:
    desc: git config
    cmds:
      - cd {{.BASE_SRC_PATH}} && {{.GIT_BIN_NAME}} config --list --show-scope --show-origin
      
  clone:root:
    desc: git clone root
    cmds:
      # todo: make a VAR, and let Root Task file override it.
      - cd {{.GIT_VAR_ROOT_PATH}} && {{.GIT_BIN_NAME}} clone -h
      # set cross platform attributes, so Windows does not screw up the line endings.
      - cd {{.GIT_VAR_ROOT_PATH}} && {{.GIT_BIN_NAME}} config --local core.autocrlf false
      - cd {{.GIT_VAR_ROOT_PATH}} && {{.GIT_BIN_NAME}} config --local core.eol lf
      - cd {{.GIT_VAR_ROOT_PATH}} && {{.GIT_BIN_NAME}} submodule update --init --recursive

  clone:src:
    desc: git clone the src code.
    cmds:
      - echo 'Cloning the src ...'
      - cd {{.BASE_SRC_PATH}} && {{.GIT_BIN_NAME}} clone {{.GIT_VAR_SRC_REPO_URL}} -b {{.GIT_VAR_SRC_REPO_VERSION}} --single-branch --depth 1
      - cd {{.BASE_SRC_PATH}} && {{.GIT_BIN_NAME}} config --local core.autocrlf false
      - cd {{.BASE_SRC_PATH}} && {{.GIT_BIN_NAME}} config --local core.eol lf
      #- cd {{.BASE_SRC_PATH}} && {{.GIT_BIN_NAME}} config --local core.sparseCheckout true
      #- cd {{.BASE_SRC_PATH}} && {{.GIT_BIN_NAME}} config --local remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'
      #- cd {{.BASE_SRC_PATH}} && {{.GIT_BIN_NAME}} config --local remote.origin.url {{.GIT_VAR_SRC_REPO_URL}}
      #- cd {{.BASE_SRC_PATH}} && {{.GIT_BIN_NAME}} config --local remote.origin.pushurl {{.GIT_VAR_SRC_REPO_URL}}
      #- cd {{.BASE_SRC_PATH}} && {{.GIT_BIN_NAME}} submodule update --init --recursive
      - cd {{.BASE_SRC_PATH}} && echo > .gitignore && echo '{{.GIT_VAR_SRC_REPO_NAME}}' >> .gitignore
  clone:src:del:
    desc: delete the src code.
    cmds:
      - echo 'Deleting the src ...'
      - cd {{.BASE_SRC_PATH}} && rm -rf {{.GIT_VAR_SRC_REPO_NAME}}
      - cd {{.BASE_SRC_PATH}} && rm -f .gitignore
  pull:
    desc: git pull
    cmds:
      - task git:dep
      - echo 'Pulling ...'
      - cd {{.GIT_VAR_ROOT_PATH}} && {{.GIT_BIN_NAME}} pull --rebase
  push:
    desc: 'git push ( eg: COMMIT_MESSAGE=?? task git:push )'
    vars:
      COMMIT_MESSAGE: 'ci'
    cmds:
      - task git:dep
      - echo 'Pushing ...'
      - cd {{.GIT_VAR_ROOT_PATH}} && {{.GIT_BIN_NAME}} add . 
      - cd {{.GIT_VAR_ROOT_PATH}} && {{.GIT_BIN_NAME}} commit -S -am '{{.COMMIT_MESSAGE}}'
      - cd {{.GIT_VAR_ROOT_PATH}} && {{.GIT_BIN_NAME}} push

  ### github specific release stuff

  release-list-dep:
    desc: download and extract all releases meta data from github.
    cmds:
      - task base:shell-wgot-github-releases-tocwd -- {{.GIT_VAR_ROOT_RELEASE_LIST_URL}} 
    silent: false

  release-list:
    desc: lists the releases on github
    cmds:
      - task git:release-list-dep
      - go install github.com/itchyny/gojq/cmd/gojq@latest
      - gojq -r '.assets[] | select(.name | contains("darwin")) | .browser_download_url' {{.BASE_SRC_PATH}}/github-releases-list.json
      - gojq -r '.assets[] | select(.name | contains("linux")) | .browser_download_url' {{.BASE_SRC_PATH}}/github-releases-list.json
      - gojq -r '.assets[] | select(.name | contains("windows")) | .browser_download_url' {{.BASE_SRC_PATH}}/github-releases-list.json
      # loop: https://taskfile.dev/usage/#looping-over-tasks
    silent: false

  


  ### ssh 

  ssh-del:
    desc: deletes ssh keys and their config. Tricky to be idempotent
    cmds:
      #- rm {{.GIT_SIGNING_KEY_PRIVATE_PATH}}
      #- rm {{.GIT_SIGNING_KEY_PUBLIC_PATH}}

  ssh-list:
    desc: list all ssh keys
    cmds:
      - echo 'Adding the ssh keys to the ssh agent ...'
      - ssh-add -l


  ssh-create:
    desc: git ssh creation. Only once of it not there.
    cmds:
      - echo 'Creating up ssh keys and config ...'
      # 1. create ssh keys 
      # https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent
      #- ssh-keygen -t ed25519 -C 'gedw99_github.com' -f  {{.GIT_SIGNING_KEY_PRIVATE_PATH}}
      
      - echo '... the pub and private will be generated ...'
      # ~/.ssh/gedw99_github.com
      - echo '{{.GIT_SIGNING_KEY_PRIVATE_PATH}}'
      # ~/.ssh/gedw99_github.com.pub
      - echo '{{.GIT_SIGNING_KEY_PUBLIC_PATH}}'

      # 2. Add ssh key to the ssh config. This is tricky to be idempotent.
      # ssh-add ~/.ssh/gedw99_github.com
      #- echo '... adding to OS Identity Provider ...'
      #- ssh-add {{.GIT_SIGNING_KEY_PRIVATE_PATH}}
      
      
  ssh-set:
    desc: git ssh setup. Part of dep.
    cmds:
      - echo 'Adding the ssh keys to the ssh agent ...'
      - ssh-add -l
      - ssh-add {{.GIT_SIGNING_KEY_PRIVATE_PATH}}
      - ssh-add -l



  ### sign 

  sign-del:
    desc: git sign delete, to delete the signing up in your git config.
    cmds:
      - echo 'Deleting signing settings in your git config ...'
      - cd {{.GIT_VAR_ROOT_PATH}} && {{.GIT_BIN_NAME}} config --local user.name ''
      - cd {{.GIT_VAR_ROOT_PATH}} && {{.GIT_BIN_NAME}} config --local user.email ''
      - cd {{.GIT_VAR_ROOT_PATH}} && {{.GIT_BIN_NAME}} config --local user.signingkey ''
      - cd {{.GIT_VAR_ROOT_PATH}} && {{.GIT_BIN_NAME}} config --local gpg.program ''
      - cd {{.GIT_VAR_ROOT_PATH}} && {{.GIT_BIN_NAME}} config --local gpg.format ''
  sign-set:
    desc: git sign set, to set the signing up in your git config.
    cmds:
      - echo 'Setting signing up into your git config ...'
      - cd {{.GIT_VAR_ROOT_PATH}} && {{.GIT_BIN_NAME}} config --local user.name {{.GIT_VAR_ROOT_SIGNING_USER_NAME}}
      - cd {{.GIT_VAR_ROOT_PATH}} && {{.GIT_BIN_NAME}} config --local user.email {{.GIT_VAR_ROOT_SIGNING_USER_EMAIL}}
      - cd {{.GIT_VAR_ROOT_PATH}} && {{.GIT_BIN_NAME}} config --local user.signingkey {{.GIT_SIGNING_KEY_PRIVATE_PATH}}
      - cd {{.GIT_VAR_ROOT_PATH}} && {{.GIT_BIN_NAME}} config --local gpg.program {{.GIT_SIGNING_PROGRAM}}
      - cd {{.GIT_VAR_ROOT_PATH}} && {{.GIT_BIN_NAME}} config --local gpg.format {{.GIT_SIGNING_FORMAT}}
  sign-get:
    desc: git sign get, to see what settings you have in your git config.
    cmds:
      - echo 'Printing signing setup from your git config ...'
      - cd {{.GIT_VAR_ROOT_PATH}} && {{.GIT_BIN_NAME}} config --get user.name
      - cd {{.GIT_VAR_ROOT_PATH}} && {{.GIT_BIN_NAME}} config --get user.email
      - cd {{.GIT_VAR_ROOT_PATH}} && {{.GIT_BIN_NAME}} config --local user.signingkey
      - cd {{.GIT_VAR_ROOT_PATH}} && {{.GIT_BIN_NAME}} config --local gpg.program
      - cd {{.GIT_VAR_ROOT_PATH}} && {{.GIT_BIN_NAME}} config --local gpg.format

